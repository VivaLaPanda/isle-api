// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentNode content node
// swagger:model ContentNode
type ContentNode struct {

	// body
	Body string `json:"body,omitempty"`

	// children
	// Required: true
	Children ContentNodes `json:"children"`

	// created
	// Required: true
	Created *string `json:"created"`

	// image Uri
	ImageURI string `json:"imageUri,omitempty"`

	// score
	// Required: true
	Score *float64 `json:"score"`

	// sentiment
	// Required: true
	Sentiment *float64 `json:"sentiment"`

	// tags
	// Required: true
	Tags Tags `json:"tags"`

	// title
	Title string `json:"title,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this content node
func (m *ContentNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentiment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentNode) validateChildren(formats strfmt.Registry) error {

	if err := validate.Required("children", "body", m.Children); err != nil {
		return err
	}

	if err := m.Children.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("children")
		}
		return err
	}

	return nil
}

func (m *ContentNode) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *ContentNode) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *ContentNode) validateSentiment(formats strfmt.Registry) error {

	if err := validate.Required("sentiment", "body", m.Sentiment); err != nil {
		return err
	}

	return nil
}

func (m *ContentNode) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentNode) UnmarshalBinary(b []byte) error {
	var res ContentNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
