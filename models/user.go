// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model User
type User struct {

	// avi img Uri
	AviImgURI string `json:"aviImgUri,omitempty"`

	// commented
	Commented ContentNodes `json:"commented"`

	// email
	// Required: true
	Email *string `json:"email"`

	// invited by
	InvitedBy *User `json:"invitedBy,omitempty"`

	// joined
	Joined string `json:"joined,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	Password string `json:"password,omitempty"`

	// posted
	Posted ContentNodes `json:"posted"`

	// reputation
	// Required: true
	Reputation *float64 `json:"reputation"`

	// role
	// Required: true
	Role *Role `json:"role"`

	// spent
	Spent float64 `json:"spent,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommented(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReputation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCommented(formats strfmt.Registry) error {

	if swag.IsZero(m.Commented) { // not required
		return nil
	}

	if err := m.Commented.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("commented")
		}
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateInvitedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.InvitedBy) { // not required
		return nil
	}

	if m.InvitedBy != nil {
		if err := m.InvitedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitedBy")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePosted(formats strfmt.Registry) error {

	if swag.IsZero(m.Posted) { // not required
		return nil
	}

	if err := m.Posted.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("posted")
		}
		return err
	}

	return nil
}

func (m *User) validateReputation(formats strfmt.Registry) error {

	if err := validate.Required("reputation", "body", m.Reputation); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
