swagger: '2.0'
info:
  version: '1.0.0'
  title: Isle Network
  description: This is an API meant to interface with the Isle Network
    database to serve entities to a front-end interface. The reference server is
    written and Go and the reference client is in Javascript

 
# This scheme uses the header: "Authorization: Bearer {base64 encoded string representing a JWT}"
# We do not actually follow any OAuth flow, this is used because of Swagger2's 
# lack of "bearer". All auth is handled by Firebase on the client, and then
# the server valdiates the generated token.
securityDefinitions:
  hasRole:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: https://www.googleapis.com/oauth2/v4/token
    flow: password
    scopes:
      user: can modify own resources
      mod: user + special operations
      admin: can modify almost anything

# Here we apply the security flow called 'application' globally to all the opeartions in the spec. 
# This security scheme is defined above in the 'securityDefinitions' section.
# Global security can be overriden an operation level as seen in the example below
security:
  - hasRole:
    - user
    - mod
paths:
  "/roles":
    get:
      summary: Query roles
      operationId: getRoles
      tags:
        - roles
      responses:
        '200':
          description: An paged array of roles
          schema:
            type: array
            items:
              "$ref": "#/definitions/Role"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/tags":
    get:
      summary: Query tags
      operationId: getTags
      tags:
        - tags
      responses:
        '200':
          description: An paged array of tags
          schema:
            "$ref": "#/definitions/Tags"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    post:
      summary: Make new tag
      operationId: newTag
      tags:
        - tags
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/tags/{tagId}":
    put:
      summary: Update a tag
      operationId: updateTag
      tags:
        - tags
      parameters:
      - name: tagId
        in: path
        required: true
        description: The id of the tag to update
        type: string
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/posts":
    get:
      summary: Query posts
      operationId: getPosts
      tags:
      - posts
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        format: int32
      - name: offset
        in: query
        description: What item to start listing at
        required: false
        type: integer
        format: int32
      - name: tags
        in: query
        description: What tags to include
        required: false
        type: string
      - name: fullText
        in: query
        description: Do a full text search of titles/body
        required: false
        type: string
      - name: postedBy
        in: query
        description: Only show comments by a particular user
        required: false
        type: string
      responses:
        '200':
          description: An paged array of posts
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            "$ref": "#/definitions/ContentNodes"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    post:
      summary: Create a post
      operationId: newPost
      parameters:
        - in: body
          name: post
          description: The post to create
          required: true
          schema:
            "$ref": "#/definitions/ContentNode"
      tags:
      - posts
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/posts/{postId}":
    put:
      summary: Update a post
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          required: true
          description: The id of the post to update
          type: string
        - in: body
          name: post
          description: The data to replace the old data with
          required: true
          schema:
            "$ref": "#/definitions/ContentNode"
      tags:
      - posts
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    get:
      summary: Query for a specific post
      operationId: getPostById
      tags:
      - posts
      parameters:
      - name: postId
        in: path
        required: true
        description: The id of the post to retrieve
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            "$ref": "#/definitions/ContentNode"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/comments":
    get:
      summary: Query comments
      operationId: getComments
      tags:
      - comments
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        format: int32
      - name: offset
        in: query
        description: What item to start listing at
        required: false
        type: integer
        format: int32
      - name: fullText
        required: false
        in: query
        description: Do a full text search of comment bodies
        type: string
      - name: postedBy
        required: false
        in: query
        description: Only show comments by a particular user
        type: string
      responses:
        '200':
          description: An paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            "$ref": "#/definitions/ContentNodes"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    post:
      summary: Create a comment
      operationId: newComment
      parameters:
        - in: body
          required: true
          name: comment
          description: The comment to create
          schema:
            "$ref": "#/definitions/ContentNode"
      tags:
      - comments
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/comments/{commentId}":
    put:
      summary: Update a comment
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          description: The id of the comment to update
          type: string
        - in: body
          required: true
          name: comment
          description: The data to replace the old data with
          schema:
            "$ref": "#/definitions/ContentNode"
      tags:
      - comments
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    get:
      summary: Query for a specific comment
      operationId: getCommentsById
      tags:
      - comments
      parameters:
      - name: commentId
        in: path
        required: true
        description: The id of the comment to retrieve
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            "$ref": "#/definitions/ContentNode"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/users":
    get:
      summary: Query users
      operationId: getUsers
      tags:
      - users
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        format: int32
      - name: offset
        in: query
        description: What item to start listing at
        required: false
        type: integer
        format: int32
      - name: name
        in: query
        description: Search by username
        required: false
        type: string
      responses:
        '200':
          description: An paged array of users
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            "$ref": "#/definitions/Users"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    post:
      summary: Create a user
      operationId: newUser
      parameters:
        - in: query
          name: inviteCode
          required: true
          type: string
        - in: body
          name: user
          description: The user to create
          required: true
          schema:
            "$ref": "#/definitions/ContentNode"
      tags:
      - users
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  "/users/{userId}":
    put:
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to update
          type: string
        - in: body
          name: user
          description: The data to replace the old data with
          schema:
            "$ref": "#/definitions/User"
      tags:
      - users
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
    get:
      summary: Query for a specific user
      operationId: getUserById
      tags:
      - users
      parameters:
      - name: userId
        in: path
        required: true
        description: The id of the user to retrieve
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            "$ref": "#/definitions/User"
        default:
          description: unexpected error
          schema:
            "$ref": "#/definitions/Error"
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      # We want to require no security schemes and override the globally define security scheme.
      # To do that, we simply provide an empty array to the 'security' property.
      security: [ ]
      responses:
        200:
          description: OK
          
definitions:
  ContentNode:
    required:
    - created
    - score
    - tags
    - sentiment
    - children
    properties:
      uid:
        type: string
      title:
        type: string
      imageUri:
        type: string
      body:
        type: string
      created:
        type: string
      tags:
        "$ref": "#/definitions/Tags"
      score:
        type: number
      sentiment:
        type: number
      children:
        "$ref": "#/definitions/ContentNodes"
  ContentNodes:
    type: array
    items:
      "$ref": "#/definitions/ContentNode"
  User:
    required:
      - name
      - email
      - reputation
      - role
    properties:
      uid:
        type: string
      name:
        type: string
      email:
        type: string
      aviImgUri: 
        type: string
      reputation:
        type: number
      spent:
        type: number
      role:
        "$ref": "#/definitions/Role"
      invitedBy:
        "$ref": "#/definitions/User"
      joined:
        type: string
      posted:
        "$ref": "#/definitions/ContentNodes"
      commented:
        "$ref": "#/definitions/ContentNodes"
  Users:
    type: array
    items:
      "$ref": "#/definitions/User"
  Role:
    required:
      - text
    properties:
      uid: 
        type: string
      text: 
        type: string
  Tags:
    type: array
    items:
      "$ref": "#/definitions/Tag"
  Tag:
    required:
      - text
    properties:
      uid:
        type: string
      text:
        type: string
  Purchasable:
    required:
      - name
      - cost
    properties:
      uid:
        type: string
      name:
        type: string
      cost:
        type: number
  Invite:
    properties:
      code:
        type: string
      createdBy:
        "$ref": "#/definitions/User"
  Error:
    required:
    - code
    - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string


# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /isle/1.0.0
schemes:
 - https