// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/VivaLaPanda/isle/api/restapi/operations/comments"
	"github.com/VivaLaPanda/isle/api/restapi/operations/posts"
	"github.com/VivaLaPanda/isle/api/restapi/operations/users"
)

// NewIsleNetworkAPI creates a new IsleNetwork instance
func NewIsleNetworkAPI(spec *loads.Document) *IsleNetworkAPI {
	return &IsleNetworkAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		GetPingHandler: GetPingHandlerFunc(func(params GetPingParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPing has not yet been implemented")
		}),
		CommentsGetCommentsHandler: comments.GetCommentsHandlerFunc(func(params comments.GetCommentsParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetComments has not yet been implemented")
		}),
		CommentsGetCommentsByIDHandler: comments.GetCommentsByIDHandlerFunc(func(params comments.GetCommentsByIDParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetCommentsByID has not yet been implemented")
		}),
		PostsGetPostByIDHandler: posts.GetPostByIDHandlerFunc(func(params posts.GetPostByIDParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation PostsGetPostByID has not yet been implemented")
		}),
		PostsGetPostsHandler: posts.GetPostsHandlerFunc(func(params posts.GetPostsParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation PostsGetPosts has not yet been implemented")
		}),
		UsersGetUserByIDHandler: users.GetUserByIDHandlerFunc(func(params users.GetUserByIDParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUserByID has not yet been implemented")
		}),
		UsersGetUsersHandler: users.GetUsersHandlerFunc(func(params users.GetUsersParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsers has not yet been implemented")
		}),
		CommentsNewCommentHandler: comments.NewCommentHandlerFunc(func(params comments.NewCommentParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation CommentsNewComment has not yet been implemented")
		}),
		PostsNewPostHandler: posts.NewPostHandlerFunc(func(params posts.NewPostParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation PostsNewPost has not yet been implemented")
		}),
		UsersNewUserHandler: users.NewUserHandlerFunc(func(params users.NewUserParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation UsersNewUser has not yet been implemented")
		}),
		CommentsUpdateCommentHandler: comments.UpdateCommentHandlerFunc(func(params comments.UpdateCommentParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation CommentsUpdateComment has not yet been implemented")
		}),
		PostsUpdatePostHandler: posts.UpdatePostHandlerFunc(func(params posts.UpdatePostParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation PostsUpdatePost has not yet been implemented")
		}),
		UsersUpdateUserHandler: users.UpdateUserHandlerFunc(func(params users.UpdateUserParams, principal *VivaLaPanda) middleware.Responder {
			return middleware.NotImplemented("operation UsersUpdateUser has not yet been implemented")
		}),

		ApplicationAuth: func(token string, scopes []string) (*VivaLaPanda, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (application) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*IsleNetworkAPI This is an API meant to interface with the Isle Network database to serve entities to a front-end interface. The reference server is written and Go and the reference client is in Javascript */
type IsleNetworkAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ApplicationAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	ApplicationAuth func(string, []string) (*VivaLaPanda, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// GetPingHandler sets the operation handler for the get ping operation
	GetPingHandler GetPingHandler
	// CommentsGetCommentsHandler sets the operation handler for the get comments operation
	CommentsGetCommentsHandler comments.GetCommentsHandler
	// CommentsGetCommentsByIDHandler sets the operation handler for the get comments by Id operation
	CommentsGetCommentsByIDHandler comments.GetCommentsByIDHandler
	// PostsGetPostByIDHandler sets the operation handler for the get post by Id operation
	PostsGetPostByIDHandler posts.GetPostByIDHandler
	// PostsGetPostsHandler sets the operation handler for the get posts operation
	PostsGetPostsHandler posts.GetPostsHandler
	// UsersGetUserByIDHandler sets the operation handler for the get user by Id operation
	UsersGetUserByIDHandler users.GetUserByIDHandler
	// UsersGetUsersHandler sets the operation handler for the get users operation
	UsersGetUsersHandler users.GetUsersHandler
	// CommentsNewCommentHandler sets the operation handler for the new comment operation
	CommentsNewCommentHandler comments.NewCommentHandler
	// PostsNewPostHandler sets the operation handler for the new post operation
	PostsNewPostHandler posts.NewPostHandler
	// UsersNewUserHandler sets the operation handler for the new user operation
	UsersNewUserHandler users.NewUserHandler
	// CommentsUpdateCommentHandler sets the operation handler for the update comment operation
	CommentsUpdateCommentHandler comments.UpdateCommentHandler
	// PostsUpdatePostHandler sets the operation handler for the update post operation
	PostsUpdatePostHandler posts.UpdatePostHandler
	// UsersUpdateUserHandler sets the operation handler for the update user operation
	UsersUpdateUserHandler users.UpdateUserHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *IsleNetworkAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *IsleNetworkAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *IsleNetworkAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *IsleNetworkAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *IsleNetworkAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *IsleNetworkAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *IsleNetworkAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the IsleNetworkAPI
func (o *IsleNetworkAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ApplicationAuth == nil {
		unregistered = append(unregistered, "ApplicationAuth")
	}

	if o.GetPingHandler == nil {
		unregistered = append(unregistered, "GetPingHandler")
	}

	if o.CommentsGetCommentsHandler == nil {
		unregistered = append(unregistered, "comments.GetCommentsHandler")
	}

	if o.CommentsGetCommentsByIDHandler == nil {
		unregistered = append(unregistered, "comments.GetCommentsByIDHandler")
	}

	if o.PostsGetPostByIDHandler == nil {
		unregistered = append(unregistered, "posts.GetPostByIDHandler")
	}

	if o.PostsGetPostsHandler == nil {
		unregistered = append(unregistered, "posts.GetPostsHandler")
	}

	if o.UsersGetUserByIDHandler == nil {
		unregistered = append(unregistered, "users.GetUserByIDHandler")
	}

	if o.UsersGetUsersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersHandler")
	}

	if o.CommentsNewCommentHandler == nil {
		unregistered = append(unregistered, "comments.NewCommentHandler")
	}

	if o.PostsNewPostHandler == nil {
		unregistered = append(unregistered, "posts.NewPostHandler")
	}

	if o.UsersNewUserHandler == nil {
		unregistered = append(unregistered, "users.NewUserHandler")
	}

	if o.CommentsUpdateCommentHandler == nil {
		unregistered = append(unregistered, "comments.UpdateCommentHandler")
	}

	if o.PostsUpdatePostHandler == nil {
		unregistered = append(unregistered, "posts.UpdatePostHandler")
	}

	if o.UsersUpdateUserHandler == nil {
		unregistered = append(unregistered, "users.UpdateUserHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *IsleNetworkAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *IsleNetworkAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "application":

			result[name] = o.BearerAuthenticator(scheme.Name, func(token string, scopes []string) (interface{}, error) {
				return o.ApplicationAuth(token, scopes)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *IsleNetworkAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *IsleNetworkAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *IsleNetworkAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *IsleNetworkAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the isle network API
func (o *IsleNetworkAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *IsleNetworkAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = NewGetPing(o.context, o.GetPingHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments"] = comments.NewGetComments(o.context, o.CommentsGetCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{commentId}"] = comments.NewGetCommentsByID(o.context, o.CommentsGetCommentsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/posts/{postId}"] = posts.NewGetPostByID(o.context, o.PostsGetPostByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/posts"] = posts.NewGetPosts(o.context, o.PostsGetPostsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userId}"] = users.NewGetUserByID(o.context, o.UsersGetUserByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewGetUsers(o.context, o.UsersGetUsersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments"] = comments.NewNewComment(o.context, o.CommentsNewCommentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/posts"] = posts.NewNewPost(o.context, o.PostsNewPostHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewNewUser(o.context, o.UsersNewUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/comments"] = comments.NewUpdateComment(o.context, o.CommentsUpdateCommentHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/posts"] = posts.NewUpdatePost(o.context, o.PostsUpdatePostHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users"] = users.NewUpdateUser(o.context, o.UsersUpdateUserHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *IsleNetworkAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *IsleNetworkAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *IsleNetworkAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *IsleNetworkAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
