// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/VivaLaPanda/isle-api/models"
)

// NewTagCreatedCode is the HTTP code returned for type NewTagCreated
const NewTagCreatedCode int = 201

/*NewTagCreated Null response

swagger:response newTagCreated
*/
type NewTagCreated struct {
}

// NewNewTagCreated creates NewTagCreated with default headers values
func NewNewTagCreated() *NewTagCreated {

	return &NewTagCreated{}
}

// WriteResponse to the client
func (o *NewTagCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*NewTagDefault unexpected error

swagger:response newTagDefault
*/
type NewTagDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewNewTagDefault creates NewTagDefault with default headers values
func NewNewTagDefault(code int) *NewTagDefault {
	if code <= 0 {
		code = 500
	}

	return &NewTagDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the new tag default response
func (o *NewTagDefault) WithStatusCode(code int) *NewTagDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the new tag default response
func (o *NewTagDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the new tag default response
func (o *NewTagDefault) WithPayload(payload *models.Error) *NewTagDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the new tag default response
func (o *NewTagDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NewTagDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
