// Code generated by go-swagger; DO NOT EDIT.

package posts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetPostsURL generates an URL for the get posts operation
type GetPostsURL struct {
	FullText *string
	Limit    *int32
	Offset   *int32
	PostedBy *string
	Tags     *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetPostsURL) WithBasePath(bp string) *GetPostsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetPostsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetPostsURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/posts"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/VivaLaPanda/Isle/1.0.0"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var fullText string
	if o.FullText != nil {
		fullText = *o.FullText
	}
	if fullText != "" {
		qs.Set("fullText", fullText)
	}

	var limit string
	if o.Limit != nil {
		limit = swag.FormatInt32(*o.Limit)
	}
	if limit != "" {
		qs.Set("limit", limit)
	}

	var offset string
	if o.Offset != nil {
		offset = swag.FormatInt32(*o.Offset)
	}
	if offset != "" {
		qs.Set("offset", offset)
	}

	var postedBy string
	if o.PostedBy != nil {
		postedBy = *o.PostedBy
	}
	if postedBy != "" {
		qs.Set("postedBy", postedBy)
	}

	var tags string
	if o.Tags != nil {
		tags = *o.Tags
	}
	if tags != "" {
		qs.Set("tags", tags)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetPostsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetPostsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetPostsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetPostsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetPostsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetPostsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
